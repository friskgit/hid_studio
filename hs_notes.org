#+OPTIONS: num:nil toc:nil date:nil
#+LATEX_HEADER: \usepackage[cm]{fullpage}
# #+PROPERTY: header-args: :noweb yes :exports results

* main
** using commas
- 5: one syntonic comma is 81/80 or 21.5 cents
- 7: one septimal comma is 64/43 or 27.3 cents
- 11: approximated to one undecimal quartertone (Richard H. Stein) 33/32 or 53.3 cents
- 5: grave fifth 40/27
- 9: pythagorean minor seven

  1/1 81/80 

* scsynth

* Sound
  Load ~midi_ctrl~ and play with the preset in the table, or create a new table.

Free function
#+name: free_all
#+begin_src sclang :results none
  MIDIIn.removeFuncFrom(\noteOn, ~noteOn);
  MIDIIn.removeFuncFrom(\noteOff, ~noteOff);
  MIDIIn.removeFuncFrom(\control, ~control);
#+end_src

#+begin_src sclang :results none
  s.options.numOutputBusChannels = 16;
#+end_src

Main function that loads all other functions. Takes midi input and process it accordingly. Uses the pitches from the table [[*pitches][pitches]] 
#+name: midi_ctrl
#+begin_src sclang :results none :noweb yes  :var tab=tab_notes
  (
  <<play_function>>
  <<set_function>>
  <<tune_function>>
  <<harmonic_synthdef>>
  <<check_active_synth>>
  <<tune_param_general>>
  <<lookup_row>>

  MIDIClient.init;
  MIDIIn.connectAll;
  MIDIIn.connect;    // init for one port midi interface

  // arrays
  ~tuneup = Array.new(24);
  ~synths = Array.new(48);
  ~crnt = Array.new(16);

  ~noteOff = { arg src, chan, num, vel;
    	//  	[chan,num,vel / 127].postln;
  };

  ~noteOn = { arg src, chan, num, vel;
  	"noteon: ".post;
    	[chan,num,vel / 127].postln;
    	if(chan == 4, 
  		{
  			if( ~update_crnt.value(num) == 0,
  				{
  					~play_tune.value(num);
  					~crnt.add(num);
  				}, {
  					~tuner_set.value(num, \gate, 0);
  				}
  			);
  		});
  };

  ~control = { arg src, chan, num, val;
  	"control: ".post;
    	[chan,num,val].postln;
  	// this is the button control
  	if(chan == 0,
    		{
  			if(val > 0,
  				{
  					~play_note.value(num)
  				}, {
  					~setter.value(num, \gate, 0)
  				}
    			);
    		});
    	// for push buttons
  	if(chan == 4,
    		{
    			~tuner.value(num, \freq, val);
    		});
  };

  MIDIIn.addFuncTo(\noteOn, ~noteOn);
  MIDIIn.addFuncTo(\noteOff, ~noteOff);
  MIDIIn.addFuncTo(\control, ~control);
  );
#+end_src

#+begin_src sclang :results none
~update_crnt.value(1).postln;
#+end_src

#+name: check_active_synth
#+begin_src sclang :results none
  ~update_crnt = { arg id;
  	var res = 0;
  	~crnt.do({ arg item, i;
    		if(item == id,
  			{"found".postln;
  				~crnt.postln;
  				~crnt.removeAt(i);
  				res = -1;},
  			{}
  		);
    	});
  	res;
  };
 #+end_src

Function to start a synth at the ratio specified by the table lookup.
#+name: play_function
#+begin_src sclang :results none :noweb yes :var tab=tab_notes
  <<lookup>>
  ~play_note = { arg val=0;
  	var index = val, fund  = 60, ratio = 1/1, freq = ~main_root, ch = val-32;
  	ratio = ~find_row.value(index)[3];
  	fund = fund + ~find_row.value(index)[1];
  	freq = ratio * (fund.midicps);
  	"lookup gives: ".post; ~find_row.value(index).postln;
  	"index is: ".post; index.postln;
  	"ratio is: ".post; ratio.postln;
  	"freq is: ".post; freq.postln;
  	~synths.add(Synth.new(\osc, [\root, fund, \freq, freq, \amplitude, 0.3 , \gate, 1, \index, val]));
  };

#+end_src

#+begin_src sclang :results none
  ~find_row.value(44).postln;
#+end_src

Function to start a tunable synth at the ratio specified by the table lookup.
#+name: tune_function
#+begin_src sclang :results none :noweb yes :var tab=tab_notes
  <<tune_adjust_function>>
  ~play_tune = { arg val=0;
  	var index = val, fund = 60, ratio = 1/1, freq = ~main_root;
  	ratio = ~find_row.value(index)[3];
  	fund = fund + ~find_row.value(index)[1];
  	freq = ratio * (fund.midicps);
  	"find_row gives: ".post; ~find_row.value(index).postln;
  	"index is: ".post; index.postln;
  	"ratio is: ".post; ratio.postln;
  	"freq is: ".post; freq.postln;
  	~tuneup.add(Synth.new(\osc, [\root, fund, \freq, freq, \amplitude, 0.3 , \gate, 1, \index, val]));
  };

#+end_src

Function returns an array with the key, octave, index and ratio (as a decimal)
#+name: lookup_row
#+begin_src sclang :results none :var tab=tab_notes
  ~find_row = { arg num;
  	var return, key, octave, harmi, ratio;
  	tab.size.do({ arg i;
  		if(tab[i][1] == num,
  			{
  				return = tab[i];
  				key = tab[i][1];
  				octave = tab[i][2];
  				harmi = tab[i][3];
  				ratio = tab[i][4] / tab[i][5];
  			}
  		);
  	});
  	return = [key, octave, harmi, ratio];
  };

//  ~find_row.value(62).postln;
#+end_src

#+begin_src sclang :results none
  a = Synth.new(\osc, [\out, 4, \root, 200, \freq, 440, \amplitude, 0.3 , \gate, 1]);
  s.meter;
#+end_src

#+begin_src sclang
  ~find_row.value(60).postln;
#+end_src

#+RESULTS:
: ~find_row.value(60).postln;

#+name: set_function
#+begin_src sclang :results none
  ~setter = { arg index, param, val=0;
    	~synths.do({ arg item, i;
    		item.get(\index, { arg value;
    			if(value == index,
  				{
  					item.set(param, 0);
  					~synths.removeAt(i);				
  				}, {}
    			);
    		});
    	});

  };
#+end_src

#+name: tune_adjust_function
#+begin_src sclang :results none :var tab=tab_notes
  ~tuner = { arg index, param, val=0;
  	var freq, fund = 60, ratio;
  	ratio = ~find_row.value(index)[3];
  	fund = fund + ~find_row.value(index)[1];
  	freq = ratio * (fund.midicps);
  	freq = freq + ((val - 64) / 16);
    	~tuneup.do({ arg item, i;
    		item.get(\index, {arg value;
    			if(value == index,
  				{
  					item.set(param, freq);
  				}, {}
    			);
    		});
    	});
  };
#+end_src

#+name: tune_param_general
#+begin_src sclang :results none
  ~tuner_set = { arg index, param, val=0;
  	~tuneup.do({ arg item, i;
  		item.get(\index, {arg value;
  			if(value == index, {
  				item.set(param, val);
  				~tuneup.removeAt(i);
  			},
  				{}
  			);
  		});
  	});

  };
#+end_src

Can't get data out of the script.
#+name: tune_param_get
#+begin_src sclang :results none
  ~nther = 0;
  ~tuner_get = { arg index;
  	var return;
  	~tuneup.do({ arg item, i;
  		return = item.getn(\freq, 10, {arg val;
  			~testme.value(val[0]);
  			//val[0].postln;			
  		});
  	});
  };

  ~testme = {arg val;
  //  	"here".postln;
//    	val.postln;
  	~nther = val;
  };

  ~tuner_get.value(61);
~nther.postln;
#+end_src

#+name: harmonic_synthdef
#+begin_src sclang :results none
  SynthDef(\osc, {
          var sig, index = \index.kr(0);
          sig = SinOsc.ar(\freq.kr(440), 0, \amplitude.kr(0.2));
          Out.ar(\out.ir(0), sig * EnvGen.kr(Env.adsr, \gate.kr(1), doneAction: Done.freeSelf));
  }).add;
#+end_src

Function returns an array with the key, octave, index and ratio (as a decimal)
#+name: lookup
#+begin_src sclang :results none :var tab=tab_notes
  ~lookup = { arg index=0;
          var i = index + 2,
          key = tab[i][1],
          octave = tab[i][2],
          harmi = tab[i][3],
          ratio = tab[i][4] / tab[i][5],
          result = [key, octave, harmi, ratio];
  };
#+end_src
** pitches
First column is an index, second is the root of the input signal (MIDI), third is the index in the harmonic series. Fourth and fifth are the nominator and the denominator
#+name: tab_notes3
| index | BU16 | root | harmonic | 5- limit |     |
|       |      |      |   series |        N |   D |
|-------+------+------+----------+----------+-----|
|     0 |   32 |    3 |        1 |       27 |  16 |
|     1 |   33 |    3 |        2 |       81 |  32 |
|     2 |   34 |    3 |        3 |      243 | 128 |
|     3 |   35 |    3 |        4 |      729 | 256 |
|     4 |   36 |   -2 |        1 |        9 |   8 |
|     5 |   37 |   -2 |        2 |       27 |  16 |
|     6 |   38 |   -2 |        3 |       81 |  32 |
|     7 |   39 |   -2 |        4 |      243 |  64 |
|-------+------+------+----------+----------+-----|
|     8 |   40 |   -7 |        5 |        1 |   1 |
|     9 |   41 |   -7 |        6 |        3 |   2 |
|    10 |   42 |   -7 |        7 |        9 |   8 |
|    11 |   43 |   -7 |        8 |       27 |  16 |
|    12 |   44 |    0 |        9 |        1 |   1 |
|    13 |   45 |    0 |       10 |        3 |   2 |
|    14 |   46 |    0 |       11 |        9 |   8 |
|    15 |   47 |    0 |       12 |       27 |  16 |
|-------+------+------+----------+----------+-----|

#+name: tab_notes2
| index | BU16 | root | harmonic | 5- limit |     |
|       |      |      |   series |        N |   D |
|-------+------+------+----------+----------+-----|
|     0 |   32 |    0 |        1 |       27 |  16 |
|     1 |   33 |    0 |        2 |       81 |  32 |
|     2 |   34 |    0 |        3 |      243 | 128 |
|     3 |   35 |    0 |        4 |      729 | 256 |
|     4 |   36 |    0 |        1 |        9 |   8 |
|     5 |   37 |    0 |        2 |       27 |  16 |
|     6 |   38 |    0 |        3 |       81 |  32 |
|     7 |   39 |    0 |        4 |      243 |  64 |
|-------+------+------+----------+----------+-----|
|     8 |   40 |    0 |        5 |        3 |   2 |
|     9 |   41 |    0 |        6 |        9 |   8 |
|    10 |   42 |    0 |        7 |       27 |  16 |
|    11 |   43 |    0 |        8 |       81 |  32 |
|    12 |   44 |    0 |        9 |        1 |   1 |
|    13 |   45 |    0 |       10 |        3 |   2 |
|    14 |   46 |    0 |       11 |        9 |   8 |
|    15 |   47 |    0 |       12 |       27 |  16 |
|-------+------+------+----------+----------+-----|

See [cite:@Tenney2008, p 11] bottom grid.
#+name: tab_notes
| index | BU16 | root | harmonic | 5- limit |    |
|       |      |      |   series |        N |  D |
|-------+------+------+----------+----------+----|
|     0 |   32 |    0 |        1 |        5 |  3 |
|     1 |   33 |    0 |        2 |        5 |  4 |
|     2 |   34 |    0 |        3 |       15 |  8 |
|     3 |   35 |    0 |        4 |       45 | 32 |
|     4 |   36 |    0 |        1 |        2 |  1 |
|     5 |   37 |    0 |        2 |        8 |  3 |
|     6 |   38 |    0 |        3 |        7 |  4 |
|     7 |   39 |    0 |        4 |       21 | 16 |
|-------+------+------+----------+----------+----|
|     8 |   40 |    0 |        5 |        4 |  3 |
|     9 |   41 |    0 |        6 |        1 |  1 |
|    10 |   42 |    0 |        7 |        3 |  2 |
|    11 |   43 |    0 |        8 |        9 |  8 |
|    12 |   44 |    0 |        9 |       16 | 15 |
|    13 |   45 |    0 |       10 |        8 |  5 |
|    14 |   46 |    0 |       11 |        6 |  5 |
|    15 |   47 |    0 |       12 |        9 | 5  |
|-------+------+------+----------+----------+----|

Beatings. See also [[file:tuning_intervals.pd][tuning_intervals]]  pd patch 7-limit beating patterns on 4/3.
#+name: tab_notes_fourth
| index | BU16 | root | harmonic | 5- limit |    |
|       |      |      |   series |        N |  D |
|-------+------+------+----------+----------+----|
|     0 |   32 |    0 |        1 |        4 |  3 |
|     1 |   33 |    0 |        2 |        1 |  1 |
|     2 |   34 |    0 |        3 |        2 |  1 |
|     3 |   35 |    0 |        4 |        3 |  2 |
|-------+------+------+----------+----------+----|
|     4 |   36 |    0 |        1 |       75 | 56 |
|     5 |   37 |    0 |        2 |       98 | 75 |
|     6 |   38 |    0 |        3 |       21 | 16 |
|     7 |   39 |    0 |        4 |       45 | 32 |
|-------+------+------+----------+----------+----|
|     8 |   40 |    0 |        5 |       49 | 36 |
|     9 |   41 |    0 |        6 |        1 |  1 |
|    10 |   42 |    0 |        7 |        3 |  2 |
|    11 |   43 |    0 |        8 |       49 | 36 |
|-------+------+------+----------+----------+----|
|    12 |   44 |    0 |        9 |       45 | 32 |
|    13 |   45 |    0 |       10 |       21 | 16 |
|    14 |   46 |    0 |       11 |       98 | 75 |
|    15 |   47 |    0 |       12 |       75 | 56 |
|-------+------+------+----------+----------+----|
* Recordings
** recording 1
Beatings table 7-limit beating patterns
Preparing recording on 'localhost'
Recording channels [ 0, 1 ] ... 
path: '/Users/henrik_frisk/Music/SuperCollider Recordings/SC_240123_204420.wav'
-------------------------
find_row gives: [ 32, 0, 1, 1.3333333333333 ]
index is: 32
4/3 +
ratio is: 1.3333333333333
freq is: 348.83408706746
-------------------------
find_row gives: [ 36, 0, 1, 1.3392857142857 ]
index is: 36
75/56 +
ratio is: 1.3392857142857
freq is: 350.39138209902
-------------------------
find_row gives: [ 37, 0, 2, 1.3066666666667 ]
index is: 37
98/75 +
ratio is: 1.3066666666667
freq is: 341.85740532612
-------------------------
find_row gives: [ 32, 0, 1, 1.3333333333333 ]
index is: 32
4/3 -
ratio is: 1.3333333333333
freq is: 348.83408  706746
-------------------------
find_row gives: [ 36, 0, 1, 1.3392857142857 ]
index is: 36
75/56 -
ratio is: 1.3392857142857
freq is: 350.39138209902
-------------------------
find_row gives: [ 47, 0, 12, 1.3392857142857 ]
index is: 47
75/56 +
ratio is: 1.3392857142857
freq is: 350.39138209902
-------------------------
find_row gives: [ 45, 0, 10, 1.3125 ]
index is: 45
21/16 +
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 44, 0, 9, 1.40625 ]
index is: 44
45/32 +
ratio is: 1.40625
freq is: 367.91095120397
-------------------------
find_row gives: [ 45, 0, 10, 1.3125 ]
index is: 45
21/16 -
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 46, 0, 11, 1.3066666666667 ]
index is: 46
98/75 -
ratio is: 1.3066666666667
freq is: 341.85740532612
-------------------------
find_row gives: [ 45, 0, 10, 1.3125 ]
index is: 45
21/16
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 32, 0, 1, 1.3333333333333 ]
index is: 32
4/3
ratio is: 1.3333333333333
freq is: 348.83408706746
-------------------------
find_row gives: [ 46, 0, 11, 1.3066666666667 ]
index is: 46
98/75
ratio is: 1.3066666666667
freq is: 341.85740532612
-------------------------
find_row gives: [ 45, 0, 10, 1.3125 ]
index is: 45
21/16
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 43, 0, 8, 1.3611111111111 ]
index is: 43
49/36
ratio is: 1.3611111111111
freq is: 356.10146388137
-------------------------
find_row gives: [ 35, 0, 4, 1.5 ]
index is: 35
3/2
ratio is: 1.5
freq is: 392.4383479509
-------------------------
find_row gives: [ 32, 0, 1, 1.3333333333333 ]
index is: 32
4/3
ratio is: 1.3333333333333
freq is: 348.83408706746
-------------------------
find_row gives: [ 35, 0, 4, 1.5 ]
index is: 35
3/2
ratio is: 1.5
freq is: 392.4383479509
-------------------------
find_row gives: [ 44, 0, 9, 1.40625 ]
index is: 44
45/32
ratio is: 1.40625
freq is: 367.91095120397
-------------------------
find_row gives: [ 35, 0, 4, 1.5 ]
index is: 35
3/2
ratio is: 1.5
freq is: 392.4383479509
-------------------------
find_row gives: [ 45, 0, 10, 1.3125 ]
index is: 45
21/16
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 39, 0, 4, 1.40625 ]
index is: 39
45/32
ratio is: 1.40625
freq is: 367.91095120397
-------------------------
find_row gives: [ 36, 0, 1, 1.3392857142857 ]
index is: 36
75/56
ratio is: 1.3392857142857
freq is: 350.39138209902
-------------------------
find_row gives: [ 35, 0, 4, 1.5 ]
index is: 35
3/2
ratio is: 1.5
freq is: 392.4383479509
-------------------------
find_row gives: [ 46, 0, 11, 1.3066666666667 ]
index is: 46
98/75
ratio is: 1.3066666666667
freq is: 341.85740532612
-------------------------
find_row gives: [ 47, 0, 12, 1.3392857142857 ]
index is: 47
75/56
ratio is: 1.3392857142857
freq is: 350.39138209902
-------------------------
find_row gives: [ 44, 0, 9, 1.40625 ]
index is: 44
45/32
ratio is: 1.40625
freq is: 367.91095120397
-------------------------
find_row gives: [ 36, 0, 1, 1.3392857142857 ]
index is: 36
75/56
ratio is: 1.3392857142857
freq is: 350.39138209902
-------------------------
find_row gives: [ 38, 0, 3, 1.3125 ]
index is: 38
21/16
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 37, 0, 2, 1.3066666666667 ]
index is: 37
98/75
ratio is: 1.3066666666667
freq is: 341.85740532612
-------------------------
find_row gives: [ 32, 0, 1, 1.3333333333333 ]
index is: 32
4/3
ratio is: 1.3333333333333
freq is: 348.83408706746
-------------------------
find_row gives: [ 40, 0, 5, 1.3611111111111 ]
index is: 40
49/36
ratio is: 1.3611111111111
freq is: 356.10146388137
-------------------------
find_row gives: [ 40, 0, 5, 1.3611111111111 ]
index is: 40
49/36
ratio is: 1.3611111111111
freq is: 356.10146388137
-------------------------
find_row gives: [ 40, 0, 5, 1.3611111111111 ]
index is: 40
49/36
ratio is: 1.3611111111111
freq is: 356.10146388137
-------------------------
find_row gives: [ 47, 0, 12, 1.3392857142857 ]
index is: 47
75/56
ratio is: 1.3392857142857
freq is: 350.39138209902
-------------------------
find_row gives: [ 43, 0, 8, 1.3611111111111 ]
index is: 43
49/36
ratio is: 1.3611111111111
freq is: 356.10146388137

Recording Stopped: (SC_240123_204420.wav)
** recording 2
Tenney table
Preparing recording on 'localhost'
Recording channels [ 0, 1 ] ... 
path: '/Users/henrik_frisk/Music/SuperCollider Recordings/SC_240123_211414.wav'

-------------------------
find_row gives: [ 40, 0, 5, 1.3333333333333 ]
index is: 40
ratio is: 1.3333333333333
freq is: 348.83408706746
-------------------------
find_row gives: [ 40, 0, 5, 1.3333333333333 ]
index is: 40
ratio is: 1.3333333333333
freq is: 348.83408706746
-------------------------
find_row gives: [ 39, 0, 4, 1.3125 ]
index is: 39
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 39, 0, 4, 1.3125 ]
index is: 39
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 35, 0, 4, 1.40625 ]
index is: 35
3/2
ratio is: 1.40625
freq is: 367.91095120397
-------------------------
find_row gives: [ 39, 0, 4, 1.3125 ]
index is: 39
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 39, 0, 4, 1.3125 ]
index is: 39
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 42, 0, 7, 1.5 ]
index is: 42
ratio is: 1.5
freq is: 392.4383479509
-------------------------
find_row gives: [ 36, 0, 1, 2.0 ]
index is: 36
75/56
ratio is: 2.0
freq is: 523.2511306012
-------------------------
find_row gives: [ 37, 0, 2, 2.6666666666667 ]
index is: 37
98/75
ratio is: 2.6666666666667
freq is: 697.66817413493
-------------------------
find_row gives: [ 44, 0, 9, 1.0666666666667 ]
index is: 44
45/32
ratio is: 1.0666666666667
freq is: 279.06726965397
-------------------------
find_row gives: [ 40, 0, 5, 1.3333333333333 ]
index is: 40
ratio is: 1.3333333333333
freq is: 348.83408706746
-------------------------
find_row gives: [ 39, 0, 4, 1.3125 ]
index is: 39
ratio is: 1.3125
freq is: 343.38355445704
-------------------------
find_row gives: [ 43, 0, 8, 1.125 ]
index is: 43
ratio is: 1.125
freq is: 294.32876096317
-------------------------
find_row gives: [ 35, 0, 4, 1.40625 ]
index is: 35
ratio is: 1.40625
freq is: 367.91095120397
-------------------------
find_row gives: [ 38, 0, 3, 1.75 ]
index is: 38
ratio is: 1.75
freq is: 457.84473927605
-------------------------
find_row gives: [ 41, 0, 6, 1.0 ]
index is: 41
ratio is: 1.0
freq is: 261.6255653006
-------------------------
find_row gives: [ 46, 0, 11, 1.2 ]
index is: 46
ratio is: 1.2
freq is: 313.95067836072
Recording Stopped: (SC_240123_211414.wav)
